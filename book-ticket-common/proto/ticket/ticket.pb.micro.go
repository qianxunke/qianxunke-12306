// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ticket.proto

package ticket

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TrainService service

type TrainService interface {
	//获取Train详细信息
	GetTrainInfo(ctx context.Context, in *In_GetTrainInfo, opts ...client.CallOption) (*Out_GetTrainInfo, error)
	//获取票列表
	GetTrainInfoList(ctx context.Context, in *In_GetTrainInfoList, opts ...client.CallOption) (*Out_GetTrainInfoList, error)
	//修改信息
	UpdateTrainInfo(ctx context.Context, in *In_UpdateTrainInfo, opts ...client.CallOption) (*Out_UpdateTrainInfo, error)
	//新增信息
	AddTrain(ctx context.Context, in *In_AddTrain, opts ...client.CallOption) (*Out_AddTrain, error)
}

type trainService struct {
	c    client.Client
	name string
}

func NewTrainService(name string, c client.Client) TrainService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "ticket"
	}
	return &trainService{
		c:    c,
		name: name,
	}
}

func (c *trainService) GetTrainInfo(ctx context.Context, in *In_GetTrainInfo, opts ...client.CallOption) (*Out_GetTrainInfo, error) {
	req := c.c.NewRequest(c.name, "TrainService.GetTrainInfo", in)
	out := new(Out_GetTrainInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainService) GetTrainInfoList(ctx context.Context, in *In_GetTrainInfoList, opts ...client.CallOption) (*Out_GetTrainInfoList, error) {
	req := c.c.NewRequest(c.name, "TrainService.GetTrainInfoList", in)
	out := new(Out_GetTrainInfoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainService) UpdateTrainInfo(ctx context.Context, in *In_UpdateTrainInfo, opts ...client.CallOption) (*Out_UpdateTrainInfo, error) {
	req := c.c.NewRequest(c.name, "TrainService.UpdateTrainInfo", in)
	out := new(Out_UpdateTrainInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainService) AddTrain(ctx context.Context, in *In_AddTrain, opts ...client.CallOption) (*Out_AddTrain, error) {
	req := c.c.NewRequest(c.name, "TrainService.AddTrain", in)
	out := new(Out_AddTrain)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TrainService service

type TrainServiceHandler interface {
	//获取Train详细信息
	GetTrainInfo(context.Context, *In_GetTrainInfo, *Out_GetTrainInfo) error
	//获取票列表
	GetTrainInfoList(context.Context, *In_GetTrainInfoList, *Out_GetTrainInfoList) error
	//修改信息
	UpdateTrainInfo(context.Context, *In_UpdateTrainInfo, *Out_UpdateTrainInfo) error
	//新增信息
	AddTrain(context.Context, *In_AddTrain, *Out_AddTrain) error
}

func RegisterTrainServiceHandler(s server.Server, hdlr TrainServiceHandler, opts ...server.HandlerOption) error {
	type trainService interface {
		GetTrainInfo(ctx context.Context, in *In_GetTrainInfo, out *Out_GetTrainInfo) error
		GetTrainInfoList(ctx context.Context, in *In_GetTrainInfoList, out *Out_GetTrainInfoList) error
		UpdateTrainInfo(ctx context.Context, in *In_UpdateTrainInfo, out *Out_UpdateTrainInfo) error
		AddTrain(ctx context.Context, in *In_AddTrain, out *Out_AddTrain) error
	}
	type TrainService struct {
		trainService
	}
	h := &trainServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TrainService{h}, opts...))
}

type trainServiceHandler struct {
	TrainServiceHandler
}

func (h *trainServiceHandler) GetTrainInfo(ctx context.Context, in *In_GetTrainInfo, out *Out_GetTrainInfo) error {
	return h.TrainServiceHandler.GetTrainInfo(ctx, in, out)
}

func (h *trainServiceHandler) GetTrainInfoList(ctx context.Context, in *In_GetTrainInfoList, out *Out_GetTrainInfoList) error {
	return h.TrainServiceHandler.GetTrainInfoList(ctx, in, out)
}

func (h *trainServiceHandler) UpdateTrainInfo(ctx context.Context, in *In_UpdateTrainInfo, out *Out_UpdateTrainInfo) error {
	return h.TrainServiceHandler.UpdateTrainInfo(ctx, in, out)
}

func (h *trainServiceHandler) AddTrain(ctx context.Context, in *In_AddTrain, out *Out_AddTrain) error {
	return h.TrainServiceHandler.AddTrain(ctx, in, out)
}
