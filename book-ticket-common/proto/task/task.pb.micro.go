// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: task.proto

package task

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TaskService service

type TaskService interface {
	//获取任务详细信息
	GetTaskInfo(ctx context.Context, in *In_GetTaskInfo, opts ...client.CallOption) (*Out_GetTaskInfo, error)
	//获取票列表
	GetTaskInfoList(ctx context.Context, in *In_GetTaskInfoList, opts ...client.CallOption) (*Out_GetTaskInfoList, error)
	//修改信息
	UpdateTaskInfo(ctx context.Context, in *In_UpdateTaskInfo, opts ...client.CallOption) (*Out_UpdateTaskInfo, error)
	//新增信息
	AddTask(ctx context.Context, in *In_AddTask, opts ...client.CallOption) (*Out_AddTask, error)
	//获取票列表
	GetUserTaskList(ctx context.Context, in *In_GetUserTaskList, opts ...client.CallOption) (*Out_GetTaskInfoList, error)
	//修改信息
	UpdateTaskStatus(ctx context.Context, in *In_UpdateTaskStatus, opts ...client.CallOption) (*Out_UpdateTaskStatus, error)
}

type taskService struct {
	c    client.Client
	name string
}

func NewTaskService(name string, c client.Client) TaskService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "task"
	}
	return &taskService{
		c:    c,
		name: name,
	}
}

func (c *taskService) GetTaskInfo(ctx context.Context, in *In_GetTaskInfo, opts ...client.CallOption) (*Out_GetTaskInfo, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetTaskInfo", in)
	out := new(Out_GetTaskInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetTaskInfoList(ctx context.Context, in *In_GetTaskInfoList, opts ...client.CallOption) (*Out_GetTaskInfoList, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetTaskInfoList", in)
	out := new(Out_GetTaskInfoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) UpdateTaskInfo(ctx context.Context, in *In_UpdateTaskInfo, opts ...client.CallOption) (*Out_UpdateTaskInfo, error) {
	req := c.c.NewRequest(c.name, "TaskService.UpdateTaskInfo", in)
	out := new(Out_UpdateTaskInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) AddTask(ctx context.Context, in *In_AddTask, opts ...client.CallOption) (*Out_AddTask, error) {
	req := c.c.NewRequest(c.name, "TaskService.AddTask", in)
	out := new(Out_AddTask)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetUserTaskList(ctx context.Context, in *In_GetUserTaskList, opts ...client.CallOption) (*Out_GetTaskInfoList, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetUserTaskList", in)
	out := new(Out_GetTaskInfoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) UpdateTaskStatus(ctx context.Context, in *In_UpdateTaskStatus, opts ...client.CallOption) (*Out_UpdateTaskStatus, error) {
	req := c.c.NewRequest(c.name, "TaskService.UpdateTaskStatus", in)
	out := new(Out_UpdateTaskStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceHandler interface {
	//获取任务详细信息
	GetTaskInfo(context.Context, *In_GetTaskInfo, *Out_GetTaskInfo) error
	//获取票列表
	GetTaskInfoList(context.Context, *In_GetTaskInfoList, *Out_GetTaskInfoList) error
	//修改信息
	UpdateTaskInfo(context.Context, *In_UpdateTaskInfo, *Out_UpdateTaskInfo) error
	//新增信息
	AddTask(context.Context, *In_AddTask, *Out_AddTask) error
	//获取票列表
	GetUserTaskList(context.Context, *In_GetUserTaskList, *Out_GetTaskInfoList) error
	//修改信息
	UpdateTaskStatus(context.Context, *In_UpdateTaskStatus, *Out_UpdateTaskStatus) error
}

func RegisterTaskServiceHandler(s server.Server, hdlr TaskServiceHandler, opts ...server.HandlerOption) error {
	type taskService interface {
		GetTaskInfo(ctx context.Context, in *In_GetTaskInfo, out *Out_GetTaskInfo) error
		GetTaskInfoList(ctx context.Context, in *In_GetTaskInfoList, out *Out_GetTaskInfoList) error
		UpdateTaskInfo(ctx context.Context, in *In_UpdateTaskInfo, out *Out_UpdateTaskInfo) error
		AddTask(ctx context.Context, in *In_AddTask, out *Out_AddTask) error
		GetUserTaskList(ctx context.Context, in *In_GetUserTaskList, out *Out_GetTaskInfoList) error
		UpdateTaskStatus(ctx context.Context, in *In_UpdateTaskStatus, out *Out_UpdateTaskStatus) error
	}
	type TaskService struct {
		taskService
	}
	h := &taskServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TaskService{h}, opts...))
}

type taskServiceHandler struct {
	TaskServiceHandler
}

func (h *taskServiceHandler) GetTaskInfo(ctx context.Context, in *In_GetTaskInfo, out *Out_GetTaskInfo) error {
	return h.TaskServiceHandler.GetTaskInfo(ctx, in, out)
}

func (h *taskServiceHandler) GetTaskInfoList(ctx context.Context, in *In_GetTaskInfoList, out *Out_GetTaskInfoList) error {
	return h.TaskServiceHandler.GetTaskInfoList(ctx, in, out)
}

func (h *taskServiceHandler) UpdateTaskInfo(ctx context.Context, in *In_UpdateTaskInfo, out *Out_UpdateTaskInfo) error {
	return h.TaskServiceHandler.UpdateTaskInfo(ctx, in, out)
}

func (h *taskServiceHandler) AddTask(ctx context.Context, in *In_AddTask, out *Out_AddTask) error {
	return h.TaskServiceHandler.AddTask(ctx, in, out)
}

func (h *taskServiceHandler) GetUserTaskList(ctx context.Context, in *In_GetUserTaskList, out *Out_GetTaskInfoList) error {
	return h.TaskServiceHandler.GetUserTaskList(ctx, in, out)
}

func (h *taskServiceHandler) UpdateTaskStatus(ctx context.Context, in *In_UpdateTaskStatus, out *Out_UpdateTaskStatus) error {
	return h.TaskServiceHandler.UpdateTaskStatus(ctx, in, out)
}
